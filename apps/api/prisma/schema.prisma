// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // shadowDatabaseUrl not needed in prod; omit it
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SELLER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum AuthProviderType {
  EMAIL
  PHONE
  GOOGLE
  FACEBOOK
}

enum KYCStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  COD
  RAZORPAY
  STRIPE
  UPI
  NETBANKING
  WALLET
}

enum ShipmentStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  firstName        String?
  lastName         String?
  phone            String?
  passwordHash     String
  role             UserRole   @default(CUSTOMER)
  status           UserStatus @default(ACTIVE)
  isVerified       Boolean    @default(false)
  refreshTokenHash String?
  lastLoginAt      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relations
  authProviders    AuthProvider[]
  addresses        Address[]
  orders          Order[]
  reviews         Review[]

  @@index([role, status])
  @@map("users")
}

// =====================
// Vendor Management
// =====================

enum VendorStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum BankAccountStatus {
  UNVERIFIED
  VERIFIED
  REJECTED
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum StatementStatus {
  DRAFT
  FINALIZED
  PAID
}

enum PayoutStatus {
  INITIATED
  COMPLETED
  FAILED
}

enum CommissionType {
  PERCENTAGE
  FLAT
}

model Vendor {
  id            String        @id @default(cuid())
  name          String
  legalName     String?
  email         String        @unique
  phone         String?
  gstNumber     String?       @unique
  panNumber     String?       @unique
  status        VendorStatus  @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  addresses     VendorAddress[]
  users         VendorUser[]
  bankAccounts  VendorBankAccount[]
  kyc           VendorKyc[]
  commission    CommissionRule[]
  statements    VendorStatement[]
  payouts       Payout[]
  settings      VendorSetting?
  issues        VendorIssue[]

  @@map("vendors")
}

model VendorAddress {
  id         String   @id @default(cuid())
  vendorId   String
  line1      String
  line2      String?
  city       String
  state      String
  country    String   @default("India")
  postalCode String
  type       String   @default("BUSINESS")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  vendor     Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_addresses")
}

model VendorUser {
  id        String   @id @default(cuid())
  vendorId  String
  userId    String
  role      String   @default("OWNER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, userId])
  @@map("vendor_users")
}

model VendorBankAccount {
  id           String            @id @default(cuid())
  vendorId     String
  accountHolder String
  accountNumber String
  ifsc         String
  bankName     String
  branch       String?
  status       BankAccountStatus @default(UNVERIFIED)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  vendor       Vendor            @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_bank_accounts")
}

model VendorKyc {
  id        String   @id @default(cuid())
  vendorId  String
  docType   String
  docUrl    String
  status    KYCStatus @default(PENDING)
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_kyc")
}

model CommissionRule {
  id         String         @id @default(cuid())
  vendorId   String
  type       CommissionType @default(PERCENTAGE)
  value      Decimal        @db.Decimal(8, 2)
  category   String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  vendor     Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("commission_rules")
}

model VendorStatement {
  id          String          @id @default(cuid())
  vendorId    String
  periodStart DateTime
  periodEnd   DateTime
  totalSales  Decimal         @db.Decimal(12, 2)
  totalFees   Decimal         @db.Decimal(12, 2)
  netAmount   Decimal         @db.Decimal(12, 2)
  status      StatementStatus @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  vendor      Vendor          @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_statements")
}

model Payout {
  id          String       @id @default(cuid())
  vendorId    String
  statementId String?
  amount      Decimal      @db.Decimal(12, 2)
  status      PayoutStatus @default(INITIATED)
  reference   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  vendor      Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  statement   VendorStatement? @relation(fields: [statementId], references: [id])

  @@map("payouts")
}

model VendorSetting {
  id              String  @id @default(cuid())
  vendorId        String  @unique
  autoPayout      Boolean @default(false)
  defaultCommissionType CommissionType @default(PERCENTAGE)
  defaultCommissionValue Decimal        @db.Decimal(8, 2) @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  vendor          Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_settings")
}

model VendorIssue {
  id         String      @id @default(cuid())
  vendorId   String
  title      String
  description String?
  status     IssueStatus @default(OPEN)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  vendor     Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_issues")
}

// Ownership mapping on products and orders (minimal placeholders if not present elsewhere)
model Product {
  id        String   @id @default(cuid())
  vendorId  String
  name      String
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor    Vendor   @relation(fields: [vendorId], references: [id])

  @@map("products")
}

model Order {
  id        String   @id @default(cuid())
  vendorId  String
  total     Decimal  @db.Decimal(10, 2)
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor    Vendor   @relation(fields: [vendorId], references: [id])

  @@map("orders")
}

model AuthProvider {
  id           String       @id @default(cuid())
  provider     String
  userId       String
  passwordHash String?
  isVerified   Boolean      @default(false)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([userId, provider])
  @@map("auth_providers")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String?
  firstName   String?
  lastName    String?
  phone       String?
  street      String
  addressLine String?
  landmark    String?
  city        String
  state       String
  postalCode  String
  pincode     String?
  country     String   @default("India")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model PlatformConfig {
  id                   String   @id @default("cfg-singleton")
  brandName            String
  brandLogoUrl         String
  uiHelpUrl            String?
  authAdminRoles       Json     // Array of allowed admin roles
  authOtpEnabled       Boolean  @default(false)
  uiShowDemoCreds      Boolean  @default(false)
  defaultRedirectAdmin String   @default("/dashboard")
  defaultRedirectSeller String  @default("/orders")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relation to demo credentials
  demoCredentials      DemoCredential[]

  @@map("platform_configs")
}

model DemoCredential {
  id                String         @id @default(cuid())
  label             String
  email             String         @unique
  passwordPlaintext String?
  role              UserRole
  platformConfigId  String         @default("cfg-singleton")
  platformConfig    PlatformConfig @relation(fields: [platformConfigId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([role])
  @@map("demo_credentials")
}