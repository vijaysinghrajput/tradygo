// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SELLER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum AuthProviderType {
  EMAIL
  PHONE
  GOOGLE
  FACEBOOK
}

enum KYCStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  COD
  RAZORPAY
  STRIPE
  UPI
  NETBANKING
  WALLET
}

enum ShipmentStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  firstName        String?
  lastName         String?
  phone            String?
  passwordHash     String
  role             UserRole   @default(CUSTOMER)
  status           UserStatus @default(ACTIVE)
  isVerified       Boolean    @default(false)
  refreshTokenHash String?
  lastLoginAt      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relations
  authProviders    AuthProvider[]
  addresses        Address[]
  orders          Order[]
  reviews         Review[]

  @@index([role, status])
  @@map("users")
}

model AuthProvider {
  id           String       @id @default(cuid())
  provider     String
  userId       String
  passwordHash String?
  isVerified   Boolean      @default(false)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([userId, provider])
  @@map("auth_providers")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String?
  firstName   String?
  lastName    String?
  phone       String?
  street      String
  addressLine String?
  landmark    String?
  city        String
  state       String
  postalCode  String
  pincode     String?
  country     String   @default("India")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model PlatformConfig {
  id                   String   @id @default("cfg-singleton")
  brandName            String
  brandLogoUrl         String
  uiHelpUrl            String?
  authAdminRoles       Json     // Array of allowed admin roles
  authOtpEnabled       Boolean  @default(false)
  uiShowDemoCreds      Boolean  @default(false)
  defaultRedirectAdmin String   @default("/dashboard")
  defaultRedirectSeller String  @default("/orders")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relation to demo credentials
  demoCredentials      DemoCredential[]

  @@map("platform_configs")
}

model DemoCredential {
  id                String         @id @default(cuid())
  label             String
  email             String         @unique
  passwordPlaintext String?
  role              UserRole
  platformConfigId  String         @default("cfg-singleton")
  platformConfig    PlatformConfig @relation(fields: [platformConfigId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([role])
  @@map("demo_credentials")
}