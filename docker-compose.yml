version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: tradygo-postgres
    environment:
      POSTGRES_DB: tradygo_core
      POSTGRES_USER: tradygo
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradygo -d tradygo_core"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: tradygo-redis
    volumes:
      - redis_data:/data
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: tradygo-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
      - ./backups:/backups
    command: server /data --console-address ":9001"
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    image: ghcr.io/tradygo/api:latest
    container_name: tradygo-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://tradygo:${POSTGRES_PASSWORD}@postgres:5432/tradygo_core
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      S3_SECRET_KEY: ${MINIO_SECRET_KEY}
    env_file:
      - ./env/.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    image: ghcr.io/tradygo/web:latest
    container_name: tradygo-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.tradygo.in
    env_file:
      - ./env/.prod
    depends_on:
      - api
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin:
    image: ghcr.io/tradygo/admin:latest
    container_name: tradygo-admin
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.tradygo.in
    env_file:
      - ./env/.prod
    depends_on:
      - api
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3

  seller:
    image: ghcr.io/tradygo/seller:latest
    container_name: tradygo-seller
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.tradygo.in
    env_file:
      - ./env/.prod
    depends_on:
      - api
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003"]
      interval: 30s
      timeout: 10s
      retries: 3

  webhook:
    image: ghcr.io/tradygo/api:latest
    container_name: tradygo-webhook
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://tradygo:${POSTGRES_PASSWORD}@postgres:5432/tradygo_core
      REDIS_URL: redis://redis:6379
    env_file:
      - ./env/.prod
    command: ["npm", "run", "start:webhook"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradygo-internal
    restart: unless-stopped

  worker:
    image: ghcr.io/tradygo/api:latest
    container_name: tradygo-worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://tradygo:${POSTGRES_PASSWORD}@postgres:5432/tradygo_core
      REDIS_URL: redis://redis:6379
    env_file:
      - ./env/.prod
    command: ["npm", "run", "start:worker"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradygo-internal
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: tradygo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./shared/cdn:/srv/tradygo/shared/cdn:ro
    depends_on:
      - api
      - web
      - admin
      - seller
      - minio
    networks:
      - tradygo-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  kuma:
    image: louislam/uptime-kuma:1
    container_name: tradygo-monitor
    volumes:
      - kuma_data:/app/data
    networks:
      - tradygo-internal
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  kuma_data:

networks:
  tradygo-internal:
    driver: bridge