version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-tradygo}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.railway
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:password@postgres:5432/tradygo}
      NODE_ENV: production
      PORT: ${PORT:-3001}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-your-jwt-access-secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-jwt-refresh-secret}
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    depends_on:
      - postgres
    restart: unless-stopped

  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile.railway
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped

  seller:
    build:
      context: .
      dockerfile: apps/seller/Dockerfile.railway
    environment:
      NODE_ENV: production
      PORT: 3002
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:3001}
    ports:
      - "3002:3002"
    depends_on:
      - api
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.railway
    environment:
      NODE_ENV: production
      PORT: 3003
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:3001}
    ports:
      - "3003:3003"
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data: